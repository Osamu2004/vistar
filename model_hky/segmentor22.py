import torch
import torch.nn as nn
import timm
from timm.models.convnext import _cfg
from model_hky.upernet import Upernet,Upernet2
from model_test.nn.nas import TFM1,TFM2,TFM3,TFM4,TFM5,TFM6,TFM7,TFM8,TFM9,TFM10,NASNetwork
from model_test.nn.act import build_act
from torch.nn import Sequential
def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn("mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
                      "The distribution of values may be incorrect.",
                      stacklevel=2)

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor

def trunc_normal_(tensor, mean=0., std=1., a=-2., b=2.):
    # type: (Tensor, float, float, float, float) -> Tensor
    r"""Fills the input Tensor with values drawn from a truncated
    normal distribution. The values are effectively drawn from the
    normal distribution :math:`\mathcal{N}(\text{mean}, \text{std}^2)`
    with values outside :math:`[a, b]` redrawn until they are within
    the bounds. The method used for generating the random values works
    best when :math:`a \leq \text{mean} \leq b`.
    Args:
        tensor: an n-dimensional `torch.Tensor`
        mean: the mean of the normal distribution
        std: the standard deviation of the normal distribution
        a: the minimum cutoff value
        b: the maximum cutoff value
    Examples:
        >>> w = torch.empty(3, 5)
        >>> nn.init.trunc_normal_(w)
    """
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)

class AttentionModule(nn.Module):
    def __init__(self, dim):
        super().__init__()
        self.fusion = TFM1(dim//4)
        self.qkv = nn.Conv2d(dim,dim//4,1)
        self.act1 = build_act("gelu")
        self.attention = Sequential(
            nn.Conv2d(in_channels=dim//4,out_channels=dim//4,kernel_size=5,stride=1,groups=dim//4,padding=2,),
            nn.Conv2d(in_channels=dim//4,out_channels=dim//4,kernel_size=7,stride=1,groups=dim//4,dilation=3,padding=9,),
            nn.Conv2d(in_channels=dim//4,out_channels=dim//4,kernel_size=1,stride=1,groups=1),
        )
        self.act2 = build_act("gelu")
        self.proj = nn.Conv2d(dim//4,dim,1)


    
    def forward(self,input ):
        t1, t2=input
        t1_skip, t2_skip =t1.clone(), t2.clone()
        t1 = self.act1(self.qkv(t1))
        t2 = self.act1(self.qkv(t2))
        fusion = self.fusion((t1,t2))
        attn = self.act2(self.attention(fusion))
        t1 = self.proj(attn)*t1_skip
        t2 = self.proj(attn)*t2_skip
        return (t1,t2)

class segmentor(nn.Module):
    def __init__(self,dataset=''):
        super().__init__()
        #config1 = _cfg(url='', file=r"E:\zzy\mmchange0.2\model_hky\convnext_small_fb_in22k.safetensors")
        #config2 = _cfg(url='', file=r"E:\zzy\mmchange0.2\model_hky\convnext_tiny_fb_in22k.safetensors")
        self.backbone1 = timm.create_model('convnext_small.fb_in22k',features_only=True,drop_path_rate=0.5)
        self.backbone2 = timm.create_model('convnext_tiny.fb_in22k',features_only=True,drop_path_rate=0.4)
        self.backbone2.stem_0 = torch.nn.Conv2d(1, self.backbone2.stem_0.out_channels, 
                                                kernel_size=self.backbone2.stem_0.kernel_size,
                                                stride=self.backbone2.stem_0.stride,
                                                padding=self.backbone2.stem_0.padding,
                                                bias=True)

        self.decoder = Upernet2(num_classes = 4, phi = 'convnext-tiny')

        self.attn1 = AttentionModule(96)
        self.attn2 = AttentionModule(192)
        self.attn3 = AttentionModule(384)
        self.attn4 = AttentionModule(768)
        #self.fusion1 =TFM1(96)
        #self.fusion2 =TFM1(192)
        #self.fusion3 =TFM1(384)
        #self.fusion4 =TFM1(768)
    def init_weights(self, mode=''):
        self.apply(_init_vit_weights)

    def _init_weights(self, m):
        # this fn left here for compat with downstream users
        _init_vit_weights(m)
    def forward(self,x):
        t1,t2 = x["image"],x["t2_image"]
        feed_dict1 = self.backbone1(t1)
        feed_dict2 = self.backbone2(t2)
        dict1 = {}
        dict2 = {}
        feed_dict1[0],feed_dict2[0] = self.attn1((feed_dict1[0],feed_dict2[0]))
        feed_dict1[1],feed_dict2[1] = self.attn2((feed_dict1[1],feed_dict2[1]))
        feed_dict1[2],feed_dict2[2] = self.attn3((feed_dict1[2],feed_dict2[2]))
        feed_dict1[3],feed_dict2[3] = self.attn4((feed_dict1[3],feed_dict2[3]))
        dict1["stage1"] = feed_dict1[0]
        dict1["stage2"] = feed_dict1[1]
        dict1["stage3"] = feed_dict1[2]
        dict1["stage4"] = feed_dict1[3]
        dict2["stage1"] = feed_dict2[0]
        dict2["stage2"] = feed_dict2[1]
        dict2["stage3"] = feed_dict2[2]
        dict2["stage4"] = feed_dict2[3]
        output = self.decoder((dict1,dict2))
        return output

def _init_vit_weights(module: nn.Module, name: str = '', head_bias: float = 0.):
    """ ViT weight initialization
    * When called without n, head_bias, jax_impl args it will behave exactly the same
      as my original init for compatibility with prev hparam / downstream use cases (ie DeiT).
    """
    if name.startswith('backbone'):
        return
    if isinstance(module, nn.Linear):
        if name.startswith('head'):
            nn.init.zeros_(module.weight)
            nn.init.constant_(module.bias, head_bias)
        elif name.startswith('pre_logits'):
            lecun_normal_(module.weight)
            nn.init.zeros_(module.bias)
        else:
            trunc_normal_(module.weight, std=.02)
            if module.bias is not None:
                nn.init.zeros_(module.bias)
    elif isinstance(module, (nn.LayerNorm, nn.GroupNorm, nn.BatchNorm2d)):
        nn.init.zeros_(module.bias)
        nn.init.ones_(module.weight)
    elif isinstance(module, nn.Conv2d):
        trunc_normal_(module.weight, std=.02)
        if module.bias is not None:
            nn.init.constant_(module.bias, 0)