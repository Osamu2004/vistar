import torch
import torch.nn as nn
import timm
from timm.models.convnext import _cfg
from model_hky.upernet import Upernet,Upernet2
from model_test.nn.act import build_act
from torch.nn import Sequential
from model_test.nn.ops import LinearLayer,build_norm
class TFM(nn.Module):
    def __init__(
        self, 
        int_ch: int, 
        norm=("ln2d",), 
    ):
        super(TFM, self).__init__()
        self.diff_conv = nn.Conv3d(in_channels=int_ch, out_channels=int_ch, kernel_size=(2, 3, 3), padding=(0, 1, 1),groups = int_ch)
        self.conv11 = nn.Conv2d(in_channels=int_ch*2, out_channels=int_ch, kernel_size=1)
        self.norm = build_norm(norm[0],int_ch )
        self.norm1 = build_norm(norm[0],int_ch )
        self.norm2 = build_norm(norm[0],int_ch )
        self.norm3 = build_norm(norm[0],int_ch )
        self.norm4 = build_norm(norm[0],int_ch )
        self.project = nn.Conv2d(in_channels=int_ch, out_channels=int_ch, kernel_size=1)
        self.act = build_act("gelu")
    
    def forward(self, inputs) -> torch.Tensor:
        x1, x2 = inputs
        fusion = torch.stack([x1, x2], dim=2)
        fusion1 = self.norm1(self.diff_conv(fusion).squeeze(2))
        fusion2 = self.norm2(torch.abs(x1-x2))
        fusion3 = self.norm3(self.conv11(torch.cat([x1,x2],dim=1)))
        
        x = fusion1+fusion2+fusion3+self.norm4(x1)
        x = self.project(x)
        return self.act(self.norm(x))


def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn("mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
                      "The distribution of values may be incorrect.",
                      stacklevel=2)

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor

def trunc_normal_(tensor, mean=0., std=1., a=-2., b=2.):
    # type: (Tensor, float, float, float, float) -> Tensor
    r"""Fills the input Tensor with values drawn from a truncated
    normal distribution. The values are effectively drawn from the
    normal distribution :math:`\mathcal{N}(\text{mean}, \text{std}^2)`
    with values outside :math:`[a, b]` redrawn until they are within
    the bounds. The method used for generating the random values works
    best when :math:`a \leq \text{mean} \leq b`.
    Args:
        tensor: an n-dimensional `torch.Tensor`
        mean: the mean of the normal distribution
        std: the standard deviation of the normal distribution
        a: the minimum cutoff value
        b: the maximum cutoff value
    Examples:
        >>> w = torch.empty(3, 5)
        >>> nn.init.trunc_normal_(w)
    """
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)

class AttentionModule(nn.Module):
    def __init__(self, dim):
        super().__init__()
        self.fusion = TFM(dim//4)
        self.qkv = nn.Conv2d(dim,dim//4,1)
        self.act1 = build_act("gelu")
        self.attention = Sequential(
            nn.Conv2d(in_channels=dim//4,out_channels=dim//4,kernel_size=5,stride=1,groups=dim//4,padding=2,),
            nn.Conv2d(in_channels=dim//4,out_channels=dim//4,kernel_size=7,stride=1,groups=dim//4,dilation=3,padding=9,),
            nn.Conv2d(in_channels=dim//4,out_channels=dim//4,kernel_size=1,stride=1,groups=1),
        )
        self.act2 = build_act("gelu")
        self.proj = nn.Conv2d(dim//4,dim,1)


    
    def forward(self,input ):
        t1, t2=input
        t1_skip, t2_skip =t1.clone(), t2.clone()
        t1 = self.act1(self.qkv(t1))
        t2 = self.act1(self.qkv(t2))
        fusion = self.fusion((t1,t2))
        attn = self.act2(self.attention(fusion))
        t1 = self.proj(attn)*t1_skip
        t2 = self.proj(attn)*t2_skip
        return (t1,t2)

class ChannelExchange(nn.Module):
    def __init__(self, p=2):
        super().__init__()
        self.p = p

    def forward(self, x1, x2):
        N, C, H, W = x1.shape
        exchange_mask = torch.arange(C) % self.p == 0
        exchange_mask = exchange_mask.unsqueeze(0).expand((N, -1))
        out_x1, out_x2 = torch.zeros_like(x1), torch.zeros_like(x2)
        out_x1[~exchange_mask, ...] = x1[~exchange_mask, ...]
        out_x2[~exchange_mask, ...] = x2[~exchange_mask, ...]
        out_x1[exchange_mask, ...] = x2[exchange_mask, ...]
        out_x2[exchange_mask, ...] = x1[exchange_mask, ...]
        return out_x1, out_x2



class AttentionModule2(nn.Module):
    def __init__(self, dim):
        super().__init__()
        self.fusion = TFM(dim)
        self.rgb = nn.Conv2d(dim, dim, 1)
        self.sar = nn.Conv2d(dim, dim, 1)
        self.act = build_act("gelu")
        self.ln1 = build_norm("ln2d",num_features=dim)
        self.ln2 = build_norm("ln2d",num_features=dim)
        self.attention = Sequential(
            nn.Conv2d(in_channels=dim, out_channels=dim, kernel_size=5, stride=1, groups=dim, padding=2),
            nn.Conv2d(in_channels=dim, out_channels=dim, kernel_size=7, stride=1, groups=dim, dilation=3, padding=9),
            nn.Conv2d(in_channels=dim, out_channels=dim, kernel_size=1, stride=1, groups=1),
        )
        self.proj1 = nn.Conv2d(dim, dim, 1)
        self.proj2 = nn.Conv2d(dim, dim, 1)

    def forward(self, input):
        t1, t2 = input
        t1_skip, t2_skip = t1.clone(), t2.clone()
        t1, t2 = self.ln1(t1),self.ln2(t2)
        t1 = self.act(self.rgb(t1))
        t2 = self.act(self.sar(t2))
        fusion = self.fusion((t1, t2))
        attn = self.attention(fusion)
        t1 = self.proj1(attn*t1) + t1_skip
        t2 = self.proj2(attn*t2) + t2_skip
        return (t1, t2)

class LowMixer(nn.Module):
    def __init__(self, dim, num_heads=8, qkv_bias=False, attn_drop=0., pool_size=1,
        **kwargs, ):
        super().__init__()
        self.num_heads = num_heads
        self.head_dim = head_dim = dim // num_heads
        self.scale = head_dim ** -0.5
        self.dim = dim
        
        self.qkv1 = LinearLayer(in_features = dim , out_features = dim  * 3, use_bias=qkv_bias)
        self.qkv2 = LinearLayer(in_features = dim , out_features = dim  * 3, use_bias=qkv_bias)
        self.attn_drop = nn.Dropout(attn_drop)
        self.ln1 = build_norm("ln2d",num_features=dim)
        self.ln2 = build_norm("ln2d",num_features=dim)
        self.project1 = nn.Conv2d(in_channels= dim , out_channels=dim ,kernel_size=1, bias=False)
        self.project2 = nn.Conv2d(in_channels= dim , out_channels= dim ,kernel_size=1, bias=False)
        
        self.pool = nn.AvgPool2d(pool_size, stride=pool_size, padding=0, count_include_pad=False) if pool_size > 1 else nn.Identity()
        self.uppool = nn.Upsample(scale_factor=pool_size) if pool_size > 1 else nn.Identity()
        

    def att_fun(self, q, k, v, B, N, C):
        attn = (q @ k.transpose(-2, -1)) * self.scale
        attn = attn.softmax(dim=-1)
        attn = self.attn_drop(attn)
        # x = (attn @ v).transpose(1, 2).reshape(B, N, C)
        x = (attn @ v).transpose(2, 3).reshape(B, C, N)
        return x

    def forward(self, input):
        x1,x2=input
        x1_skip,x2_skip = x1,x2
        # B, C, H, W
        B, _, _, _ = x1.shape
        x1,x2 = self.ln1(x1),self.ln2(x2)
        xa1 = self.pool(x1)
        xa1 = xa1.permute(0, 2, 3, 1).view(B, -1, self.dim)
        xa2 = self.pool(x2)
        xa2 = xa2.permute(0, 2, 3, 1).view(B, -1, self.dim)
        B, N, C = xa1.shape
        qkv1 = self.qkv1(xa1).reshape(B, N, 3, self.num_heads, C // self.num_heads).permute(2, 0, 3, 1, 4)
        qkv2 = self.qkv2(xa2).reshape(B, N, 3, self.num_heads, C // self.num_heads).permute(2, 0, 3, 1, 4)
        q1 , k1, v1 = qkv1.unbind(0)   # make torchscript happy (cannot use tensor as tuple)
        q2 , k2, v2 = qkv2.unbind(0)
        xa1 = self.att_fun(q2, k1, v1, B, N, C)
        xa2 = self.att_fun(q1, k2, v2, B, N, C)
        xa1 = xa1.view(B, C, int(N**0.5), int(N**0.5))#.permute(0, 3, 1, 2)
        
        xa1 = self.uppool(xa1)
        xa2 = xa2.view(B, C, int(N**0.5), int(N**0.5))#.permute(0, 3, 1, 2)
        
        xa2 = self.uppool(xa2)
        xa1 = self.project1(xa1)
        xa2 = self.project2(xa2)
        return xa1+x1_skip,xa2+x2_skip

class segmentor_convnext(nn.Module):
    def __init__(self,dataset=''):
        super().__init__()
        config1 = _cfg(url='', file='/opt/data/private/competition/code/model_hky/convnext_small_fb_in22k.safetensors')
        config2 = _cfg(url='', file='/root/code/model_hky/convnext_base.safetensors')
        self.backbone1 = timm.create_model('convnext_small.fb_in22k',features_only=True,pretrained=True,pretrained_cfg=config1,drop_path_rate=0.5)
        self.backbone2 = timm.create_model('convnext_small.fb_in22k',features_only=True,pretrained=True,pretrained_cfg=config1,drop_path_rate=0.5)
        self.backbone2.stem_0 = torch.nn.Conv2d(1, self.backbone2.stem_0.out_channels, 
                                                kernel_size=self.backbone2.stem_0.kernel_size,
                                                stride=self.backbone2.stem_0.stride,
                                                padding=self.backbone2.stem_0.padding,
                                                bias=True)

        self.decoder = Upernet2(num_classes = 4, phi = 'convnext-tiny')

        self.attn1 = nn.Sequential(AttentionModule2(96))
        self.attn2 = nn.Sequential(AttentionModule2(192))
        self.attn3 = nn.Sequential(AttentionModule2(384))
        self.attn4 = nn.Sequential(AttentionModule2(768))
        #self.fusion1 =TFM1(96)
        #self.fusion2 =TFM1(192)
        #self.fusion3 =TFM1(384)
        #self.fusion4 =TFM1(768)
        #self.ce = ChannelExchange(p=2)
    def init_weights(self, mode=''):
        self.apply(_init_vit_weights)

    def _init_weights(self, m):
        # this fn left here for compat with downstream users
        _init_vit_weights(m)
    def forward(self,x):
        t1,t2 = x["image"],x["t2_image"]
        feed_dict1 = self.backbone1(t1)
        feed_dict2 = self.backbone2(t2)
        dict1 = {}
        dict2 = {}
        feed_dict1[0],feed_dict2[0] = self.attn1((feed_dict1[0],feed_dict2[0]))
        feed_dict1[1],feed_dict2[1] = self.attn2((feed_dict1[1],feed_dict2[1]))
        feed_dict1[2],feed_dict2[2] = self.attn3((feed_dict1[2],feed_dict2[2]))
        feed_dict1[3],feed_dict2[3] = self.attn4((feed_dict1[3],feed_dict2[3]))
        #feed_dict1[0],feed_dict2[0] = self.ce(feed_dict1[0],feed_dict2[0])
        #feed_dict1[1],feed_dict2[1] = self.ce(feed_dict1[1],feed_dict2[1])
        #feed_dict1[2],feed_dict2[2] = self.ce(feed_dict1[2],feed_dict2[2])
        #feed_dict1[3],feed_dict2[3] = self.ce(feed_dict1[3],feed_dict2[3])
        dict1["stage1"] = feed_dict1[0]
        dict1["stage2"] = feed_dict1[1]
        dict1["stage3"] = feed_dict1[2]
        dict1["stage4"] = feed_dict1[3]
        dict2["stage1"] = feed_dict2[0]
        dict2["stage2"] = feed_dict2[1]
        dict2["stage3"] = feed_dict2[2]
        dict2["stage4"] = feed_dict2[3]
        output = self.decoder((dict1,dict2))
        return output


class segmentor_convformer(nn.Module):
    def __init__(self,dataset=''):
        super().__init__()
        config1 = _cfg(url='', file='/opt/data/private/competition/code/model_hky/convnext_small_fb_in22k.safetensors')
        config2 = _cfg(url='', file='/opt/data/private/competition/code/model_hky/convformer_m36_sail_in22k.safetensors')
        self.backbone1 = timm.create_model('convformer_m36.sail_in22k',features_only=True,pretrained=True,pretrained_cfg=config2,drop_path_rate=0.5,num_classes=0,)
        self.backbone2 = timm.create_model('convformer_m36.sail_in22k',features_only=True,pretrained=True,pretrained_cfg=config2,drop_path_rate=0.5,num_classes=0,)
        self.conv_sar = nn.Conv2d(1,3,3,padding=1)
        self.act = nn.GELU()

        self.decoder = Upernet2(num_classes = 4, phi = 'convformer_m36')

        self.attn1 = nn.Sequential(AttentionModule2(96))
        self.attn2 = nn.Sequential(AttentionModule2(192))
        self.attn3 = nn.Sequential(AttentionModule2(384))
        self.attn4 = nn.Sequential(AttentionModule2(576))
        #self.fusion1 =TFM1(96)
        #self.fusion2 =TFM1(192)
        #self.fusion3 =TFM1(384)
        #self.fusion4 =TFM1(768)
        #self.ce = ChannelExchange(p=2)
    def init_weights(self, mode=''):
        self.apply(_init_vit_weights)

    def _init_weights(self, m):
        # this fn left here for compat with downstream users
        _init_vit_weights(m)
    def forward(self,x):
        t1,t2 = x["image"],x["t2_image"]
        feed_dict1 = self.backbone1(t1)
        feed_dict2 = self.backbone2(self.act(self.conv_sar(t2)))
        dict1 = {}
        dict2 = {}
        feed_dict1[0],feed_dict2[0] = self.attn1((feed_dict1[0],feed_dict2[0]))
        feed_dict1[1],feed_dict2[1] = self.attn2((feed_dict1[1],feed_dict2[1]))
        feed_dict1[2],feed_dict2[2] = self.attn3((feed_dict1[2],feed_dict2[2]))
        feed_dict1[3],feed_dict2[3] = self.attn4((feed_dict1[3],feed_dict2[3]))
        #feed_dict1[0],feed_dict2[0] = self.ce(feed_dict1[0],feed_dict2[0])
        #feed_dict1[1],feed_dict2[1] = self.ce(feed_dict1[1],feed_dict2[1])
        #feed_dict1[2],feed_dict2[2] = self.ce(feed_dict1[2],feed_dict2[2])
        #feed_dict1[3],feed_dict2[3] = self.ce(feed_dict1[3],feed_dict2[3])
        dict1["stage1"] = feed_dict1[0]
        dict1["stage2"] = feed_dict1[1]
        dict1["stage3"] = feed_dict1[2]
        dict1["stage4"] = feed_dict1[3]
        dict2["stage1"] = feed_dict2[0]
        dict2["stage2"] = feed_dict2[1]
        dict2["stage3"] = feed_dict2[2]
        dict2["stage4"] = feed_dict2[3]
        output = self.decoder((dict1,dict2))
        return output

def _init_vit_weights(module: nn.Module, name: str = '', head_bias: float = 0.):
    """ ViT weight initialization
    * When called without n, head_bias, jax_impl args it will behave exactly the same
      as my original init for compatibility with prev hparam / downstream use cases (ie DeiT).
    """
    if name.startswith('backbone'):
        return
    if isinstance(module, nn.Linear):
        if name.startswith('head'):
            nn.init.zeros_(module.weight)
            nn.init.constant_(module.bias, head_bias)
        elif name.startswith('pre_logits'):
            lecun_normal_(module.weight)
            nn.init.zeros_(module.bias)
        else:
            trunc_normal_(module.weight, std=.02)
            if module.bias is not None:
                nn.init.zeros_(module.bias)
    elif isinstance(module, (nn.LayerNorm, nn.GroupNorm, nn.BatchNorm2d)):
        nn.init.zeros_(module.bias)
        nn.init.ones_(module.weight)
    elif isinstance(module, nn.Conv2d):
        trunc_normal_(module.weight, std=.02)
        if module.bias is not None:
            nn.init.constant_(module.bias, 0)


class segmentor_maxvit(nn.Module):
    def __init__(self,dataset=''):
        super().__init__()
        config1 = _cfg(url='', file='/opt/data/private/competition/code/model_hky/convnext_small_fb_in22k.safetensors')
        config2 = _cfg(url='', file='/opt/data/private/competition/code/model_hky/maxvit_small_tf_512_in1k.safetensors')
        self.backbone1 = timm.create_model('maxvit_small_tf_512.in1k',features_only=True,pretrained=True,pretrained_cfg=config2,drop_path_rate=0.5,num_classes=0,img_size = 512,out_indices=[1, 2, 3,4])
        self.backbone2 = timm.create_model('maxvit_small_tf_512.in1k',features_only=True,pretrained=True,pretrained_cfg=config2,drop_path_rate=0.5,num_classes=0,img_size = 512,out_indices=[1, 2, 3,4])
        self.conv_sar = nn.Conv2d(1,3,3,padding=1)
        self.act = nn.GELU()

        self.decoder = Upernet2(num_classes = 4, phi = 'maxvit')

        self.attn1 = nn.Sequential(AttentionModule2(96))
        self.attn2 = nn.Sequential(AttentionModule2(192))
        self.attn3 = nn.Sequential(AttentionModule2(384))
        self.attn4 = nn.Sequential(AttentionModule2(768))
        #self.fusion1 =TFM1(96)
        #self.fusion2 =TFM1(192)
        #self.fusion3 =TFM1(384)
        #self.fusion4 =TFM1(768)
        #self.ce = ChannelExchange(p=2)
    def init_weights(self, mode=''):
        self.apply(_init_vit_weights)

    def _init_weights(self, m):
        # this fn left here for compat with downstream users
        _init_vit_weights(m)
    def forward(self,x):
        t1,t2 = x["image"],x["t2_image"]
        feed_dict1 = self.backbone1(t1)
        feed_dict2 = self.backbone2(self.act(self.conv_sar(t2)))
        dict1 = {}
        dict2 = {}
        feed_dict1[0],feed_dict2[0] = self.attn1((feed_dict1[0],feed_dict2[0]))
        feed_dict1[1],feed_dict2[1] = self.attn2((feed_dict1[1],feed_dict2[1]))
        feed_dict1[2],feed_dict2[2] = self.attn3((feed_dict1[2],feed_dict2[2]))
        feed_dict1[3],feed_dict2[3] = self.attn4((feed_dict1[3],feed_dict2[3]))
        #feed_dict1[0],feed_dict2[0] = self.ce(feed_dict1[0],feed_dict2[0])
        #feed_dict1[1],feed_dict2[1] = self.ce(feed_dict1[1],feed_dict2[1])
        #feed_dict1[2],feed_dict2[2] = self.ce(feed_dict1[2],feed_dict2[2])
        #feed_dict1[3],feed_dict2[3] = self.ce(feed_dict1[3],feed_dict2[3])
        dict1["stage1"] = feed_dict1[0]
        dict1["stage2"] = feed_dict1[1]
        dict1["stage3"] = feed_dict1[2]
        dict1["stage4"] = feed_dict1[3]
        dict2["stage1"] = feed_dict2[0]
        dict2["stage2"] = feed_dict2[1]
        dict2["stage3"] = feed_dict2[2]
        dict2["stage4"] = feed_dict2[3]
        output = self.decoder((dict1,dict2))
        return output

def _init_vit_weights(module: nn.Module, name: str = '', head_bias: float = 0.):
    """ ViT weight initialization
    * When called without n, head_bias, jax_impl args it will behave exactly the same
      as my original init for compatibility with prev hparam / downstream use cases (ie DeiT).
    """
    if name.startswith('backbone'):
        return
    if isinstance(module, nn.Linear):
        if name.startswith('head'):
            nn.init.zeros_(module.weight)
            nn.init.constant_(module.bias, head_bias)
        elif name.startswith('pre_logits'):
            lecun_normal_(module.weight)
            nn.init.zeros_(module.bias)
        else:
            trunc_normal_(module.weight, std=.02)
            if module.bias is not None:
                nn.init.zeros_(module.bias)
    elif isinstance(module, (nn.LayerNorm, nn.GroupNorm, nn.BatchNorm2d)):
        nn.init.zeros_(module.bias)
        nn.init.ones_(module.weight)
    elif isinstance(module, nn.Conv2d):
        trunc_normal_(module.weight, std=.02)
        if module.bias is not None:
            nn.init.constant_(module.bias, 0)
            
            
class segmentor(nn.Module):
    def __init__(self,dataset=''):
        super().__init__()
        config1 = _cfg(url='', file='/opt/data/private/competition/code/model_hky/convnext_small_fb_in22k.safetensors')
        config2 = _cfg(url='', file='/opt/data/private/competition/code/model_hky/caformer_m36_sail_in22k.safetensors')
        self.backbone1 = timm.create_model('caformer_m36.sail_in22k',features_only=True,pretrained=True,pretrained_cfg=config2,drop_path_rate=0.5,num_classes=0)
        self.backbone2 = timm.create_model('caformer_m36.sail_in22k',features_only=True,pretrained=True,pretrained_cfg=config2,drop_path_rate=0.5,num_classes=0)
        self.conv_sar = nn.Conv2d(1,3,3,padding=1)
        self.act = nn.GELU()

        self.decoder = Upernet2(num_classes = 4, phi = 'convformer_m36')

        self.attn1 = nn.Sequential(AttentionModule2(96))
        self.attn2 = nn.Sequential(AttentionModule2(192))
        self.attn3 = nn.Sequential(AttentionModule2(384))
        self.attn4 = nn.Sequential(AttentionModule2(576))
        #self.fusion1 =TFM1(96)
        #self.fusion2 =TFM1(192)
        #self.fusion3 =TFM1(384)
        #self.fusion4 =TFM1(768)
        #self.ce = ChannelExchange(p=2)
    def init_weights(self, mode=''):
        self.apply(_init_vit_weights)

    def _init_weights(self, m):
        # this fn left here for compat with downstream users
        _init_vit_weights(m)
    def forward(self,x):
        t1,t2 = x["image"],x["t2_image"]
        feed_dict1 = self.backbone1(t1)
        feed_dict2 = self.backbone2(self.act(self.conv_sar(t2)))
        dict1 = {}
        dict2 = {}
        feed_dict1[0],feed_dict2[0] = self.attn1((feed_dict1[0],feed_dict2[0]))
        feed_dict1[1],feed_dict2[1] = self.attn2((feed_dict1[1],feed_dict2[1]))
        feed_dict1[2],feed_dict2[2] = self.attn3((feed_dict1[2],feed_dict2[2]))
        feed_dict1[3],feed_dict2[3] = self.attn4((feed_dict1[3],feed_dict2[3]))
        #feed_dict1[0],feed_dict2[0] = self.ce(feed_dict1[0],feed_dict2[0])
        #feed_dict1[1],feed_dict2[1] = self.ce(feed_dict1[1],feed_dict2[1])
        #feed_dict1[2],feed_dict2[2] = self.ce(feed_dict1[2],feed_dict2[2])
        #feed_dict1[3],feed_dict2[3] = self.ce(feed_dict1[3],feed_dict2[3])
        dict1["stage1"] = feed_dict1[0]
        dict1["stage2"] = feed_dict1[1]
        dict1["stage3"] = feed_dict1[2]
        dict1["stage4"] = feed_dict1[3]
        dict2["stage1"] = feed_dict2[0]
        dict2["stage2"] = feed_dict2[1]
        dict2["stage3"] = feed_dict2[2]
        dict2["stage4"] = feed_dict2[3]
        output = self.decoder((dict1,dict2))
        return output

def _init_vit_weights(module: nn.Module, name: str = '', head_bias: float = 0.):
    """ ViT weight initialization
    * When called without n, head_bias, jax_impl args it will behave exactly the same
      as my original init for compatibility with prev hparam / downstream use cases (ie DeiT).
    """
    if name.startswith('backbone'):
        return
    if isinstance(module, nn.Linear):
        if name.startswith('head'):
            nn.init.zeros_(module.weight)
            nn.init.constant_(module.bias, head_bias)
        elif name.startswith('pre_logits'):
            lecun_normal_(module.weight)
            nn.init.zeros_(module.bias)
        else:
            trunc_normal_(module.weight, std=.02)
            if module.bias is not None:
                nn.init.zeros_(module.bias)
    elif isinstance(module, (nn.LayerNorm, nn.GroupNorm, nn.BatchNorm2d)):
        nn.init.zeros_(module.bias)
        nn.init.ones_(module.weight)
    elif isinstance(module, nn.Conv2d):
        trunc_normal_(module.weight, std=.02)
        if module.bias is not None:
            nn.init.constant_(module.bias, 0)